"use strict";
/**
* PluginBase.ts
* Author: Oleg Bogdanov
* Copyright: Microsoft 2017
*
* Base export for the Web implementation of the plugin.
*/
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("lodash");
var SyncTasks = require("synctasks");
var Types = require("../common/Types");
var WebFileEncryption = /** @class */ (function () {
    function WebFileEncryption() {
    }
    WebFileEncryption.prototype.getDefaultAlgo = function () {
        if (!window._fileEncryptor) {
            throw 'Not Implemented';
        }
        return window._fileEncryptor.getDefaultAlgo();
    };
    WebFileEncryption.prototype.encryptFile = function (inPath, outPath, algo, iv, key, authkey) {
        if (!window._fileEncryptor) {
            throw 'Not Implemented';
        }
        return SyncTasks.fromThenable(window._fileEncryptor.encryptFile(inPath, outPath, algo, iv, key, authkey));
    };
    WebFileEncryption.prototype.decryptFile = function (inPath, outPath, algo, iv, key, authkey, hmac, hash) {
        if (!window._fileEncryptor) {
            throw 'Not Implemented';
        }
        return SyncTasks.fromThenable(window._fileEncryptor.decryptFile(inPath, outPath, algo, iv, key, authkey)).then(function (validation) {
            if (!_.isEqual(hash, validation.hash)) {
                return SyncTasks.Rejected('Hash validation failed');
            }
            if (!_.isEqual(hmac, validation.hmac)) {
                return SyncTasks.Rejected('HMAC validation failed');
            }
            return SyncTasks.Resolved();
        });
    };
    WebFileEncryption.prototype.useImplementation = function (encryptor) {
        if (window._fileEncryptor) {
            throw 'Already set';
        }
        window._fileEncryptor = encryptor;
    };
    WebFileEncryption.prototype.getTempLocation = function (filename) {
        if (!window._fileEncryptor) {
            throw 'Not Implemented';
        }
        return SyncTasks.fromThenable(window._fileEncryptor.getTempLocation(filename));
    };
    WebFileEncryption.prototype.moveFile = function (fromPath, toPath) {
        if (!window._fileEncryptor) {
            throw 'Not Implemented';
        }
        return SyncTasks.fromThenable(window._fileEncryptor.moveFile(fromPath, toPath));
    };
    return WebFileEncryption;
}());
exports.FileEncryption = new WebFileEncryption();
exports.Types = Types;
//# sourceMappingURL=PluginBase.js.map